service: my-nestjs-app

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  architecture: arm64
  stage: production
  region: us-east-2
  memorySize: 256
  logRetentionInDays: 1
  timeout: 15

  # Añade estas variables globales
  environment:
    LOGS_TABLE_NAME: LogsV2
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SQS_QUEUE_URL: !Ref LogsSQSQueue
    USER_NOTIFICATIONS_TOPIC_ARN: !Ref UserNotificationsTopic
    LOGS_TOPIC_ARN: !Ref LogsSNSTopic

  iam:
    role:
      statements:
        # Permisos para DynamoDB
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
           - !GetAtt LogsTable.Arn
           - !Sub "${LogsTable.Arn}/index/*"

        # Permisos para SNS (ambos topics)
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - !Sub "arn:aws:sns:${self:provider.region}:${aws:accountId}:logs-topic-${self:provider.stage}"
            - !Sub "arn:aws:sns:${self:provider.region}:${aws:accountId}:user-notifications-${self:provider.stage}"

        # Permisos completos para SQS
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - !GetAtt LogsSQSQueue.Arn

        # Permiso para listar colas (necesario para GetQueueUrl)
        - Effect: Allow
          Action:
            - sqs:ListQueues
          Resource: "*"

resources:
  Resources:

    LogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LogsV2
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: "N"
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
          
    LogsSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: logs-topic-${self:provider.stage}
        DisplayName: "Logs Topic for ${self:service}"

    UserNotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: user-notifications-${self:provider.stage}
        DisplayName: "User Notifications for ${self:service}"

    LogsSQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: logs-queue-${self:provider.stage}
        VisibilityTimeout: 30
        MessageRetentionPeriod: 1209600 # 14 días

    LogsSQSQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref LogsSQSQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt LogsSQSQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref LogsSNSTopic

    LogsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref LogsSNSTopic
        Protocol: sqs
        Endpoint: !GetAtt LogsSQSQueue.Arn

functions:
  api:
    handler: dist/lambda.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: any

plugins:
  - serverless-jetpack
  - serverless-offline